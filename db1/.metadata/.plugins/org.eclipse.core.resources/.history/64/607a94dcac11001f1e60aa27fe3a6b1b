-- CONNECTION: url=jdbc:oracle:thin:@//localhost:1521/XE
-- New script in HR.
-- Connection Type: dev 
-- Url: jdbc:oracle:thin:@//localhost:1521/XE
-- workspace : C:\Users\dkswl\OneDrive\Documents\code_upload\Auto_window\multi_it\backend\db\db1
-- Date: 2024. 5. 14.
-- Time: 오후 1:01:52


--VIEW (뷰)
--SELECT 쿼리문을 저장한 객체이다
--실질적인 데이터를 저장하고 있지않음
--테이블을 사용하는 것과 동일하게 사용할수있다.
--매번 자주 사용하는 쿼리문을 정의 해 두고 싶을때 뷰를 생성
--VIEW 를 한번 만들어두고 마치 테이블처럼 사용한다고 생각!
--CREATE [OR REPLACE] VIEW 뷰이름 AS 서브쿼리


-- GRANT CREATE VIEW TO HR -- 시트템 계정에서 권한 주기

DROP VIEW V_EMP;

CREATE OR REPLACE VIEW V_EMP
(사번, 이름, 부서)
AS 
SELECT EMPLOYEE_ID, FIRST_NAME || ' ' || LAST_NAME , DEPARTMENT_ID
FROM EMPLOYEES ;


SELECT * FROM V_EMP;


-- 사번 , 이름 , 직급명, 부서명 , 근무지역(시티명)을 조회하고, 
--그결과를 V_RESULT_EMP 라는 뷰를 생성해서 저장하세요

SELECT * FROM EMPLOYEES;


-- 다시 하기
CREATE OR REPLACE VIEW V_RESULT_VIEW
(사번, 이름, 직급명, 부서명, 근무지역(시티명))
AS 

SELECT 
A.EMPLOYEE_ID, 
A.FIRST_NAME || ' ' || A.LAST_NAME , 
C.JOB_TITLE,  B.DEPARTMENT_NAME , 
D.CITY 

FROM EMPLOYEES A

LEFT JOIN DEPARTMENTS B ON A.EMPLOYEE_ID = B.EMPLOYEE_ID
LEFT JOIN JOBS C ON C.JOB_ID = D.JOB_ID
LEFT JOIN LOCATIONS D ON D.LOCATION_ID = C.LOCATION_ID
;


SELECT * FROM V_RESULT_EMP;
SELECT * FROM V_RESULT_EMP WHERE EMPLOYEE_ID=205;



SELECT *
FROM SYS.USER_VIEWS;-- 뷰정보 확인하는 데이터 딕셔너리

-- 원본이 바뀌면 뷰도 바뀐다.

UPDATE EMPLOYEES
SET FIRST_NAME = 'LISA'
WHERE EMPLOYEE_ID = '205';

COMMIT;



CREATE OR REPLACE VIEW V_EMP_JOB
(사번, 이름 , 직급명, 근무년수)
AS
SELECT 
    A.EMPLOYEE_ID
    , FIRST_NAME ||' ' || LAST_NAME EMP_NAME
    , B.JOB_TITLE
    ,EXTRACT(YEAR FROM SYSDATE)- EXTRACT(YEAR FROM A.HIRE_DATE)
FROM EMPLOYEES A    
LEFT JOIN JOBS B ON A.JOB_ID = B.JOB_ID ;



SELECT * FROM V_EMP_JOB;


CREATE OR REPLACE VIEW V_JOBS
AS
SELECT 
    JOB_ID
    , JOB_TITLE
FROM JOBS;

SELECT * FROM JOBS;
SELECT * FROM V_JOBS;

-- 생성된 뷰를 이용해서 DML(INSERT, UPDATE, DELETE)사용가능
-- 뷰를 통해 변경하게되면 실제 데이터가 담겨있는 베이스 테이블에도 적용된다.

-- 뷰에 INSERT
INSERT INTO V_JOBS
    (JOB_ID, JOB_TITLE)
VALUES
    ('MULTI','MULTI');
COMMIT;


-- 뷰에 UPDATE
UPDATE V_JOBS
SET JOB_TITLE = 'YouTuber'
WHERE JOB_ID = 'MULTI';
COMMIT;


-- 뷰에 DELETE
DELETE FROM V_JOBS WHERE JOB_ID = 'MULTI';
COMMIT;



-- DML 명령어로 조작이 불가능한 경우
-- 1. 뷰 정의에 포함되지 않은 컬럼을 조작하는 경우
-- 2. 뷰에 포함되지 않은 컬럼 중에,
--    베이스가 되는 테이블 컬럼이 NOT NULL 제약조건이 지정된 경우
-- 3. 산술표현식으로 정의된 경우
-- 4. JOIN을 이용해 여러 테이블을 연결한 경우
-- 5. DISTINCT 포함한 경우
-- 6. 그룹함수나 GROUP BY 절을 포함한 경우


CREATE OR REPLACE VIEW V_GROUPDEPT
AS
SELECT 
    DEPARTMENT_ID,
    SUM(SALARY)합계,
    AVG(SALARY)평균
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;


SELECT * FROM V_GROUPDEPT;

INSERT INTO V_GROUPDEPT
--SQL 오류: ORA-01733: virtual column not allowed here
    (DEPARTMENT_ID, 합계, 평균)
VALUES
    ('999',6000000,400000);
COMMIT;
    
--ORA-01732 : 데이터 조작 작업이이 뷰에서 유효하지 않습니다    
UPDATE V_GROUPDEPT
SET DEPARTMENT_ID = 'D10'
WHERE DEPARTMENT_ID = 'D1';
--SQL 오류: ORA-01732: data manipulation operation not legal on this view


DELETE FROM V_GROUPDEPT WHERE DEPARTMENT_ID = 'D1';
--SQL 오류: ORA-01732: data manipulation operation not legal on this view


/* VIEW 옵션
    
    [상세 표현식]
    CREATE [OR REPLACE] [FORCE|NOFORCE] VIEW 뷰명
    AS SUBQUERY
    [WITH CHECK OPTION]
    [WITH READ ONLY];
    
    1) OR REPLACE 옵션 : 기존에 동일한 뷰가 있을경우 덮어쓰고, 존재하지 않으면 새로이 생성시켜주는
    2) FORCE/NOFORCE 옵션
       FORCE : 서브쿼리에 기술된 테이블이 존재하지 않는 테이블이여도 뷰가 생성
       NOFORCE : 서브쿼리에 기술된 테이블이 존재해야만 뷰가 생성 (생략시 기본값)
    3) WITH CHECK OPTION 옵션 : 서브쿼리에 기술된 조건에 부합하지 않은 값으로 수정하는 경우 오류 발생
    4) WITH READ ONLY 옵션 : 뷰에 대해 조회만 가능 (DML 수행 불가)
*/

-- FORCE : 서브쿼리에 기술된 테이블이 존재하지 않는 테이블이여도 뷰가 생성-- 일반적으로 잘사용되지않음
--> 경고: 컴파일오류와 함께 뷰가 생성되었습니다. 
CREATE OR REPLACE FORCE VIEW V_EMP
AS
SELECT 
    TCODE,
    TNAME,
    TCONTENT
FROM TT;

SELECT
    *
FROM V_EMP;


CREATE TABLE TT(--> TT 테이블을 생성하면 VIEW 조회가 가능해진다
    TCODE NUMBER,
    TNAME VARCHAR2(10),
    TCONTENT VARCHAR2(20)
    );


DROP TABLE TT;

-- NOFORCE : 서브쿼리에 기술된 테이블이 존재해야만 뷰가 생성 (생략시 기본값)
CREATE OR REPLACE /*NOFORCE*/ VIEW V_EMP2
AS
SELECT 
    TCODE,
    TNAME,
    TCONTENT
FROM TT;


-- WITH CHECK OPTION 옵션 : 서브쿼리에 기술된 조건에 부합하지 않은 값으로 수정하는 경우 오류 발생
CREATE OR REPLACE VIEW VW_EMP2
AS
SELECT * 
FROM EMPLOYEES
WHERE SALARY >= 10000;

SELECT * FROM VW_EMP2;



--100 번 사원의 급여를 1000원으로 변경 --> 서브쿼리 조건에 부합하지 않아도 잘변경됨
UPDATE VW_EMP2
SET SALARY =1000
WHERE EMPLOYEE_ID =100;
ROLLBACK;










