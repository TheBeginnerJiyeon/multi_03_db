-- CONNECTION: url=jdbc:oracle:thin:@//DESKTOP-MD0C8U4:1521/STR
-- New script in SCOTT.
-- Connection Type: dev 
-- Url: jdbc:oracle:thin:@//DESKTOP-MD0C8U4:1521/STR
-- workspace : C:\Users\dkswl\OneDrive\Documents\code_upload\Auto_window\multi_it\backend\db\db1
-- Date: 2024. 5. 7.
-- Time: 오전 10:01:36

--DB는 저장할 대상을 선정하고
--대상에 어떤 속성(컬럼, 항목)들이 정의해야한다.
--
--대상 == OBJECT == 객체, 개체 == ENTITY(엔터티, 엔티티)
--
--쇼핑몰을 만들 때 저장할 대상 3가지 : 회원, 게시판, 물건
--==> 저장할 대상(엔티티, 개체) 
--==> 개체는 "테이블"로 만들게 된다.!!
--==> 관계성: 회원이 물건을 사다.!(저장할 필요)
--                 관계성 "테이블"로 만들게 된다.!!


CREATE TABLE BBS
(	
	NO NUMBER(38,0),
	TITLE VARCHAR2(100),
	CONTENT VARCHAR2(100),
	WRITER VARCHAR2(100)
);

CREATE TABLE PRODUCT(
	id  NUMBER(38,0),
	name varchar2(200), 
	content varchar2(200), 
	price varchar2(200), 
	company varchar2(200), 
	img varchar2(200)
);


--CREATE TABLE MEMBER -- 이미 있어서 그냥 안만듬 
--   (	
--  ID VARCHAR2(10), 
--	PW VARCHAR2(10), 
--	NAME VARCHAR2(10), 
--	TEL VARCHAR2(10)
--   )

-- DML(Data Manupulation Language)
-- INSERT, UPDATE, DELETE, SELECT
-- : 데이터 조작 언어, 테이블에 값을 삽입하거나, 수정하거나,
--   삭제하거나, 조회하는 언어


--INSERT : 새로운행을 추가하는 구문이다. 
--         테이블의 행의 갯수가 증가한다. 

-- 테이블에 모든 컬럼에 대해 값을 INSERT
-- INSERT INTO 테이블명  VALUES(데이터, 데이터,,,,...)

-- 테이블에 일부컬럼에대해 INSERT
 -- INSERT INTO 테이블명(컬럼명, 컬럼명, 컬럼명,....)  VALUES(데이터, 데이터,데이터,,,...)

-- INSERT 연습


/*INSERT INTO "MEMBER" values('100','3456','jyjy','011','1111' );
// too many values*/

/*INSERT INTO MEMBER(id, pw, name) values('sd','123','ahb'); 
// 넣고자 하는 컬럼 순서 중요함*/

/*INSERT INTO MEMBER(id, pw, name, company) values('sd','123','ahb','lg');
// 정의되지 않은 컬럼..*/

/*INSERT INTO MEMBER
	(ID, PW, NAME, TEL)
VALUES
	('', '', '');
//  값의 수가 충분하지 않습니다. 값을 모두 정의하지 않으면 에러*/

SELECT * FROM "MEMBER" ;

COMMIT;



/*@ DQL(Data Query Language)
데이터를 검색 추출하기 위해 사용하는 언어 
DQL은 DML에 속한언어이기도 하다. 
데이터조회한 결과를 Result set(행들의 집합)이라고 한다.
->0개이상의 행이 포함될수 있고 , 특정기준에 의해 정렬될수 있다. 
*/
/*
@SELECT 기본 작성법
1. SELECT 컬럼명 FROM 테이블명;
2. SELECT 컬럼명 FROM 테이블명 WHERE 조건;

SELECT : 조회하고자하는 컬럼명을 기술, 여러개로 기술하고하하면, (쉼표)로 구분, 
        모든컬럼조회시 * 를 사용
FROM : 조회 대상 컬럼이 포함된 테이블 명을 기술 
WHERE: 행을 선택하는 조건을 기술 
       여러개의 제한조건을 포함할수있고 각 제한조건은 논리연산자로 연결, 제한조건에 만족하는 행들만 
       RESULT SET 에 포함됨
  
*/

SELECT * FROM "MEMBER" ;
SELECT * 
FROM "MEMBER" 
WHERE id='100';


SELECT id 
FROM "MEMBER" ;

SELECT id,pw 
FROM "MEMBER" 
WHERE id='100' ;

/*SELECT id AS 아이디, NAME 
FROM "MEMBER"
WHERE id>200;  // 수치 부적함??*/

--리터럴 : 임의로 지정한 문자열을 SELECT 절에 사용하면 테이블에 존재하는 데이터 처럼 사용 할수 있다.
-- 모든 행에 반복 표시된다

SELECT 
	id,
	name,
	'원' 단위
FROM "MEMBER";	



SELECT id,pw 
FROM "MEMBER" 
WHERE id='sds' ;

DELETE FROM "MEMBER" 
WHERE id='sd';

COMMIT;

-- 연결연산자를 이용해서 여러컬럼을 하나의 컬럼인것 처럼 연결할수 있다 (||)
-- 컬럼과 컬럼을 연결

select id||' : '|| name
from "member" ;


select id||' 의 이름은 '|| name val
from "member" ;


--UPDATE : 테이블에 기록된 컬럼의 값을 수정하는 구문이다 
--         테이블의 전체행의 갯수는 변화가 없다. 


-- UPDATE 테이블명 SET 컬럼명 = 바꿀값, 컬럼명 = 바꿀값, ...
-- [WHERE 컬럼명 비교연산자 비교값 ] 

UPDATE MEMBER 
	SET NAME = 'KIM' 
WHERE ID = '100';

UPDATE MEMBER 
	SET NAME = 'YANG' 
WHERE ID = '200';

UPDATE MEMBER 
	SET NAME = 'LEE' 
WHERE ID = '300';
  
SELECT * FROM MEMBER ;  

COMMIT;

UPDATE MEMBER 
	SET PW = '8888', TEL = '9999' 
WHERE ID = 'ICE';


SELECT * FROM "MEMBER" ;














